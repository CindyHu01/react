{"version":3,"sources":["webpack:///path---docs-hooks-faq-html-c64db350bb46bea6ad44.js","webpack:///./.cache/json/docs-hooks-faq-html.json"],"names":["webpackJsonp","900","module","exports","data","markdownRemark","html","frontmatter","title","next","prev","fields","path","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAyv9EC,aAAohIC,MAAA,YAAAC,KAAA,KAAAC,KAAA,wBAA8DC,QAAWC,KAAA,oBAAAC,KAAA,yBAA0DC,aAAgBD,KAAA","file":"path---docs-hooks-faq-html-c64db350bb46bea6ad44.js","sourcesContent":["webpackJsonp([168812293061475],{\n\n/***/ 900:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><em>Hooks</em> 是一项新功能提案，可让你在不编写类的情况下使用状态(state)和其他React功能。它们目前处于React v16.7.0-alpha中，并在<a href=\\\"https://github.com/reactjs/rfcs/pull/68\\\">此RFC中</a>进行讨论。</p>\\n<p>此页面回答了一些有关<a href=\\\"https://react.docschina.org/docs/hooks-overview.html\\\">Hooks</a>的常见问题。</p>\\n<!--\\n  if you ever need to regenerate this, this snippet in the devtools console might help:\\n\\n  $$('.anchor').map(a =>\\n    `${' '.repeat(2 * +a.parentNode.nodeName.slice(1))}` +\\n    `[${a.parentNode.textContent}](${a.getAttribute('href')})`\\n  ).join('\\\\n')\\n-->\\n<ul>\\n<li>\\n<p><a href=\\\"#%E9%87%87%E7%94%A8%E7%AD%96%E7%95%A5\\\">采用策略</a></p>\\n<ul>\\n<li><a href=\\\"#%E6%88%91%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99%E6%89%80%E6%9C%89%E7%B1%BB%E7%BB%84%E4%BB%B6\\\">我是否需要重写所有类组件？</a></li>\\n<li><a href=\\\"#%E6%88%91%E7%9A%84%E7%8E%B0%E6%9C%89react%E7%9F%A5%E8%AF%86%E4%B8%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E8%83%BD%E4%BF%9D%E6%8C%81%E7%9B%B8%E5%85%B3%E6%80%A7\\\">我的现有React知识中有多少能保持相关性？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8hooksclass%E8%BF%98%E6%98%AF%E4%B8%A4%E8%80%85%E5%85%BC%E8%80%8C%E6%9C%89%E4%B9%8B\\\">我应该使用Hooks，Class还是两者兼而有之？</a></li>\\n<li><a href=\\\"#hooks%E6%B6%B5%E7%9B%96%E4%BA%86class%E7%9A%84%E6%89%80%E6%9C%89%E7%94%A8%E4%BE%8B%E5%90%97\\\">Hooks涵盖了Class的所有用例吗？</a></li>\\n<li><a href=\\\"#hooks%E4%BC%9A%E6%9B%BF%E6%8D%A2render-props%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%90%97\\\">Hooks会替换render props和高阶组件吗？</a></li>\\n<li><a href=\\\"#hook%E5%AF%B9%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6%E7%9A%84api%E6%9D%A5%E8%AF%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88redux%E7%9A%84connect%E5%92%8Creact-router%E7%AD%89\\\">Hook对流行框架的API来说意味着什么（Redux的<code class=\\\"gatsby-code-text\\\">connect()</code>和React Router等）？</a></li>\\n<li><a href=\\\"#hooks%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E5%90%97\\\">Hooks可以使用静态类型吗？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8hooks%E7%9A%84%E7%BB%84%E4%BB%B6\\\">如何测试使用Hooks的组件？</a></li>\\n<li><a href=\\\"#lint%E8%A7%84%E5%88%99%E7%A9%B6%E7%AB%9F%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E4%BA%86%E4%BB%80%E4%B9%88\\\">lint规则究竟强制执行了什么？</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E4%BB%8E-classes-%E8%BF%87%E6%B8%A1%E5%88%B0-hooks\\\">从 Classes 过渡到 Hooks</a></p>\\n<ul>\\n<li><a href=\\\"#class%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8Ehook%E7%9A%84%E5%AF%B9%E5%BA%94%E6%83%85%E5%86%B5\\\">Class中的生命周期与Hook的对应情况</a></li>\\n<li><a href=\\\"#%E6%98%AF%E5%90%A6%E6%9C%89%E7%B1%BB%E4%BC%BC%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%9C%E8%A5%BF\\\">是否有类似实例变量的东西？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E8%BF%98%E6%98%AF%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\\">我应该使用一个还是多个状态变量？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E4%BB%85%E5%9C%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E8%BF%90%E8%A1%8Ceffect%E5%90%97\\\">我可以仅在更新时运行Effect吗？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%BB%A5%E5%89%8D%E7%9A%84props%E6%88%96state\\\">如何获得以前的props或state？</a></li>\\n<li><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0getderivedstatefromprops\\\">我该如何实现<code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%BC%95%E7%94%A8%E5%90%97\\\">我可以对函数组件进行引用吗？</a></li>\\n<li><a href=\\\"#const-thing-setthing--usestate%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D\\\"><code class=\\\"gatsby-code-text\\\">const [thing, setThing] = useState()</code>是什么意思？</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\\\">性能优化</a></p>\\n<ul>\\n<li><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%B6%E5%80%99%E8%B7%B3%E8%BF%87%E4%B8%80%E4%B8%AAeffect%E5%90%97\\\">我可以在更新的时候跳过一个effect吗？</a></li>\\n<li><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0shouldcomponentupdate\\\">我该如何实现<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BF%86%E8%AE%A1%E7%AE%97\\\">如何记忆计算？</a></li>\\n<li><a href=\\\"#%E7%94%B1%E4%BA%8E%E5%9C%A8%E6%B8%B2%E6%9F%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0hooks%E6%98%AF%E5%90%A6%E4%BC%9A%E5%8F%98%E6%85%A2\\\">由于在渲染中创建函数，Hooks是否会变慢？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%BC%A0%E9%80%92%E5%9B%9E%E8%B0%83\\\">如何避免传递回调？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E4%BB%8Eusecallback%E8%AF%BB%E5%8F%96%E7%BB%8F%E5%B8%B8%E5%8F%98%E5%8C%96%E7%9A%84%E5%80%BC\\\">如何从<code class=\\\"gatsby-code-text\\\">useCallback</code>读取经常变化的值？</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0under-the-hood\\\">底层实现（Under the Hood）</a></p>\\n<ul>\\n<li><a href=\\\"#react%E5%A6%82%E4%BD%95%E5%B0%86hook%E8%B0%83%E7%94%A8%E4%B8%8E%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%81%94\\\">React如何将Hook调用与组件相关联？</a></li>\\n<li><a href=\\\"#hooks%E7%9A%84%E7%8E%B0%E6%9C%89%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BB%80%E4%B9%88\\\">Hooks的现有技术是什么？</a></li>\\n</ul>\\n</li>\\n</ul>\\n<h2 id=\\\"采用策略\\\"><a href=\\\"#%E9%87%87%E7%94%A8%E7%AD%96%E7%95%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>采用策略</h2>\\n<h3 id=\\\"我是否需要重写所有类组件？\\\"><a href=\\\"#%E6%88%91%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99%E6%89%80%E6%9C%89%E7%B1%BB%E7%BB%84%E4%BB%B6%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我是否需要重写所有类组件？</h3>\\n<p>不需要，我们<a href=\\\"https://react.docschina.org/docs/hooks-intro.html#gradual-adoption-strategy\\\">没有计划</a>在React中删除Class——我们都需要保持出货的产品（ keep shipping products ），不可能承受重写的成本。我们建议你在新代码中尝试使用Hook。</p>\\n<h3 id=\\\"我的现有react知识中有多少能保持相关性？\\\"><a href=\\\"#%E6%88%91%E7%9A%84%E7%8E%B0%E6%9C%89react%E7%9F%A5%E8%AF%86%E4%B8%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E8%83%BD%E4%BF%9D%E6%8C%81%E7%9B%B8%E5%85%B3%E6%80%A7%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我的现有React知识中有多少能保持相关性？</h3>\\n<p>Hooks给你提供了一种更加直接使用React相关功能——例如状态，生命周期，上下文和引用的方式。但它们并没有从根本上改变React的工作方式，因此你对组件，Props和自上而下数据流的了解也同样重要。</p>\\n<p>Hooks确实有自己的学习曲线。如果本文档中缺少某些内容，请<a href=\\\"https://github.com/reactjs/reactjs.org/issues/new\\\">提出issue</a>，我们会尽力提供帮助。</p>\\n<h3 id=\\\"我应该使用hooks，class还是两者兼而有之？\\\"><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8hooks%EF%BC%8Cclass%E8%BF%98%E6%98%AF%E4%B8%A4%E8%80%85%E5%85%BC%E8%80%8C%E6%9C%89%E4%B9%8B%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我应该使用Hooks，Class还是两者兼而有之？</h3>\\n<p>当你准备好了，我们鼓励你开始尝试在你新组件中使用Hooks。请确保团队中的每个人都使用它们并熟悉本文档。我们不建议将现有Class重写为Hooks，除非你计划重写它们（例如修复bugs）。</p>\\n<p>你不能在类组件<em>中</em>使用Hooks ，但你绝对可以在一棵组件树中将Class组件和使用Hooks的函数组件混合在一起。无论一个组件是Class还是使用Hook的函数，这只是该组件的实现细节。<strong>当然从长远来看，我们希望Hooks成为人们编写React组件的主要方式。</strong></p>\\n<h3 id=\\\"hooks涵盖了class的所有用例吗？\\\"><a href=\\\"#hooks%E6%B6%B5%E7%9B%96%E4%BA%86class%E7%9A%84%E6%89%80%E6%9C%89%E7%94%A8%E4%BE%8B%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks涵盖了Class的所有用例吗？</h3>\\n<p>我们的目标是让Hooks尽快涵盖Class的所有用例。对于不常见<code class=\\\"gatsby-code-text\\\">getSnapshotBeforeUpdate</code>和<code class=\\\"gatsby-code-text\\\">componentDidCatch</code>生命周期目前还没有对应的Hook，但我们计划会很快添加上。</p>\\n<p>对于Hook来说，现在还是一个非常早的时期，因此一些方面的集成（如DevTools支持，或Flow/TypeScript类型）可能还没有准备好。某些第三方库也可能与Hook不兼容。</p>\\n<h3 id=\\\"hooks会替换render-props和高阶组件吗？\\\"><a href=\\\"#hooks%E4%BC%9A%E6%9B%BF%E6%8D%A2render-props%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks会替换render props和高阶组件吗？</h3>\\n<p>通常，render props和高阶组件只渲染一个children。我们认为使用Hooks实现这种用例将会更加简单。就目前而言，这两种模式仍然有其立足之地（例如，虚拟滚动组件可能具有<code class=\\\"gatsby-code-text\\\">renderItem</code>prop，或者可视容器组件可能具有其自己的DOM结构）。但在大多数情况下，使用Hooks就足够了，它可以帮助你减少组件树中的嵌套。</p>\\n<h3 id=\\\"hook对流行框架的api来说意味着什么（redux的connect和react-router等）？\\\"><a href=\\\"#hook%E5%AF%B9%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6%E7%9A%84api%E6%9D%A5%E8%AF%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%88redux%E7%9A%84connect%E5%92%8Creact-router%E7%AD%89%EF%BC%89%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hook对流行框架的API来说意味着什么（Redux的<code class=\\\"gatsby-code-text\\\">connect()</code>和React Router等）？</h3>\\n<p>首先，你还可以继续像以往一样使用这些API，没有任何影响。（毕竟函数组件和Class组件本质上没太多区别）</p>\\n<p>其次，这些库的新版本也可能导出自定义Hook，例如，<code class=\\\"gatsby-code-text\\\">useRedux()</code>或者<code class=\\\"gatsby-code-text\\\">useRouter()</code>允许你使用相同的功能而不需要包装器组件。</p>\\n<h3 id=\\\"hooks可以使用静态类型吗？\\\"><a href=\\\"#hooks%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks可以使用静态类型吗？</h3>\\n<p>Hooks的设计考虑了静态类型。因为它们是函数，所以它们比高阶组件之类的模式更容易正确键入。我们已提前与Flow和TypeScript团队联系，他们计划在未来包含React Hooks的定义。</p>\\n<p>重要的是，如果你想以某种方式更严格地键入React API，则可以考虑使用自定义Hook，它可以让你有权限制React API。React为你提供了原语，但你可以采用与我们提供的开箱即用方式所不同的方式将它们组合在一起。</p>\\n<h3 id=\\\"如何测试使用hooks的组件？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8hooks%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何测试使用Hooks的组件？</h3>\\n<p>从React的角度来看，使用Hooks的组件也只是一个普通的组件。如果你的测试解决方案不依赖于React内部，则测试使用了Hooks的组件应与你正常测试组件的方式相同。</p>\\n<p>如果你需要测试自定义Hook，可以通过在测试中创建一个组件并使用自定义Hook来实现。然后，你就可以测试你所编写的组件。</p>\\n<h3 id=\\\"lint规则究竟强制执行了什么？\\\"><a href=\\\"#lint%E8%A7%84%E5%88%99%E7%A9%B6%E7%AB%9F%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://www.npmjs.com/package/eslint-plugin-react-hooks\\\">lint规则</a>究竟强制执行了什么？</h3>\\n<p>我们提供了一个<a href=\\\"https://www.npmjs.com/package/eslint-plugin-react-hooks\\\">ESLint插件</a>，它强制执行<a href=\\\"https://react.docschina.org/docs/hooks-rules.html\\\">Hooks规则</a>以避免错误。它假设任何以“ <code class=\\\"gatsby-code-text\\\">use</code>” 开头的函数和紧跟在它之后的大写字母是一个Hook。我们认识到这种启发式方法并不完美，可能存在一些误报，但如果没有整个生态系统的约定，就没有办法让Hooks良好的运作 —— 更长的名字会阻止人们采用Hooks或遵循其惯例。</p>\\n<p>特别是，该规则强制执行：</p>\\n<ul>\\n<li>对Hooks的调用要么在<em>Pascal</em>命名法（PascalCase）的函数内部（假设是一个组件），要么是另一个<code class=\\\"gatsby-code-text\\\">useSomething</code>函数（假定为自定义Hook）。</li>\\n<li>在每个渲染上以相同的顺序调用Hook。</li>\\n</ul>\\n<p>还有一些启发式方法，它们可能会随着时间的推移而改变，因为我们会对规则进行微调以寻求在发现错误和避免误报之间的平衡。</p>\\n<h2 id=\\\"从-classes-过渡到-hooks\\\"><a href=\\\"#%E4%BB%8E-classes-%E8%BF%87%E6%B8%A1%E5%88%B0-hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>从 Classes 过渡到 Hooks</h2>\\n<h3 id=\\\"class中的生命周期与hook的对应情况\\\"><a href=\\\"#class%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8Ehook%E7%9A%84%E5%AF%B9%E5%BA%94%E6%83%85%E5%86%B5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Class中的生命周期与Hook的对应情况</h3>\\n<ul>\\n<li><code class=\\\"gatsby-code-text\\\">constructor</code>：函数组件不需要构造函数。你可以通过调用<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usestate\\\"><code class=\\\"gatsby-code-text\\\">useState</code></a>进行初始化。如果计算成本很高，你可以传递一个函数给<code class=\\\"gatsby-code-text\\\">useState</code>。</li>\\n<li><code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>：改为<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\\\">在渲染时</a>安排更新。</li>\\n<li><code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>：通过 <code class=\\\"gatsby-code-text\\\">React.memo</code> ，<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate\\\">下文</a>会介绍</li>\\n<li><code class=\\\"gatsby-code-text\\\">render</code>:就是函数本身。</li>\\n<li><code class=\\\"gatsby-code-text\\\">componentDidMount</code>，<code class=\\\"gatsby-code-text\\\">componentDidUpdate</code>，<code class=\\\"gatsby-code-text\\\">componentWillUnmount</code>：<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#useeffect\\\"><code class=\\\"gatsby-code-text\\\">useEffect</code> Hook</a>可表示所有这些组合（包括<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#can-i-skip-an-effect-on-updates\\\">不怎么常见</a> 、<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#can-i-run-an-effect-only-on-updates\\\">常见</a>用例）。</li>\\n<li><code class=\\\"gatsby-code-text\\\">componentDidCatch</code> and <code class=\\\"gatsby-code-text\\\">getDerivedStateFromError</code>: 暂无，后续会加上。</li>\\n</ul>\\n<h3 id=\\\"是否有类似实例变量的东西？\\\"><a href=\\\"#%E6%98%AF%E5%90%A6%E6%9C%89%E7%B1%BB%E4%BC%BC%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>是否有类似实例变量的东西？</h3>\\n<p>有的! <a href=\\\"https://react.docschina.org/docs/hooks-reference.html#useref\\\"><code class=\\\"gatsby-code-text\\\">useRef()</code></a>Hook不只是可以用在DOM上。“ref”对象实际上是一个通用容器，其<code class=\\\"gatsby-code-text\\\">current</code>属性是可变的，可以保存任何值，类似于类上的实例属性。</p>\\n<p>你可以从<code class=\\\"gatsby-code-text\\\">useEffect</code>从修改它：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> intervalRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> id <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    intervalRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>如果我们只是想设置一个间隔，我们就不需要ref（<code class=\\\"gatsby-code-text\\\">id</code>可以作为effect的local变量），但如果我们想从事件处理程序中清除间隔，它会很有用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleCancelClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>从概念上讲，你可以将refs视为类中的实例变量。但是，请避免在渲染过程中设置引用 —— 这可能会导致出乎意料的行为。相反，你应该只在事件处理程序和Effect中的修改引用。</p>\\n<h3 id=\\\"我应该使用一个还是多个状态变量？\\\"><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E8%BF%98%E6%98%AF%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我应该使用一个还是多个状态变量？</h3>\\n<p>如果你来自Class模式，你可能总是想要在<code class=\\\"gatsby-code-text\\\">useState()</code>一次调用的时就候将所有状态放入一个对象中。如果你愿意，你可以这样做。以下是鼠标移动后的组件示例。我们在local保持其position和size：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Box</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>state<span class=\\\"token punctuation\\\">,</span> setState<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>现在我们想写当用户移动鼠标的的时候，改变<code class=\\\"gatsby-code-text\\\">left</code>以及<code class=\\\"gatsby-code-text\\\">top</code>的逻辑。请注意，我们必须<strong>手动</strong>将这些字段合并到以前的状态对象中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleWindowMouseMove</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token comment\\\">// Spreading \\\"...state\\\" ensures we don't \\\"lose\\\" width and height</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageX<span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageY <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// Note: this implementation is a bit simplified</span>\\n    window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mousemove'</span><span class=\\\"token punctuation\\\">,</span> handleWindowMouseMove<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mousemove'</span><span class=\\\"token punctuation\\\">,</span> handleWindowMouseMove<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>这是因为当我们更新状态变量时，我们会<em>替换</em>它的值。这是不同于<code class=\\\"gatsby-code-text\\\">this.setState</code>的一点，它会自动<em>合并</em>了更新的字段到对象。</p>\\n<p>如果你怀念自动合并的方式，则可以编写自动合并对象状态更新的自定义Hook<code class=\\\"gatsby-code-text\\\">useLegacyState</code>。但是，<strong>我们建议根据哪些值趋于一同更改将状态拆分为多个状态变量。</strong></p>\\n<p>例如，我们可以将组件状态拆分为<code class=\\\"gatsby-code-text\\\">position</code>和<code class=\\\"gatsby-code-text\\\">size</code>对象，并始终替换<code class=\\\"gatsby-code-text\\\">position</code>而不需要合并</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Box</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>position<span class=\\\"token punctuation\\\">,</span> setPosition<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>size<span class=\\\"token punctuation\\\">,</span> setSize<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleWindowMouseMove</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token function\\\">setPosition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageX<span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageY <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>分离独立的状态变量也有另一个好处。稍后可以轻松地将一些相关逻辑提取到自定义Hook中，例如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Box</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> position <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useWindowPosition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>size<span class=\\\"token punctuation\\\">,</span> setSize<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useWindowPosition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>position<span class=\\\"token punctuation\\\">,</span> setPosition<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> position<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>请注意我们如何在不更改代码的情况下，将与<code class=\\\"gatsby-code-text\\\">position</code>状态变量相关的<code class=\\\"gatsby-code-text\\\">useStateh</code>和Effect移动到自定义Hook中。如果所有状态都在单个对象中，提取它们将更加困难。</p>\\n<p>将所有状态都放在一次<code class=\\\"gatsby-code-text\\\">useState</code>调用中，亦或是将每个字段都使用一次<code class=\\\"gatsby-code-text\\\">useState</code>调用，这两种方式都行的通。当你能在这两个极端之间找到平衡，将组相关状态分组为几个独立的状态变量时，组件往往最具可读性。如果状态逻辑变得复杂，我们建议<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usereducer\\\">用reducer的方式</a>或自定义Hook 管理它。</p>\\n<h3 id=\\\"我可以仅在更新时运行effect吗？\\\"><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E4%BB%85%E5%9C%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E8%BF%90%E8%A1%8Ceffect%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我可以仅在更新时运行Effect吗？</h3>\\n<p>这是一个罕见的用例。如果需要，可以<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#is-there-something-like-instance-variables\\\">使用手动操作ref</a>的方式，手动存储一个布尔值，该值对应于你是第一次还是后续渲染做判断，然后在Effect中检查该标志。（如果你发现自己经常这样做，可以为它创建一个自定义Hook。）</p>\\n<h3 id=\\\"如何获得以前的props或state？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%BB%A5%E5%89%8D%E7%9A%84props%E6%88%96state%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何获得以前的props或state？</h3>\\n<p>目前，你可以<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#is-there-something-like-instance-variables\\\">使用ref</a>手动执行此操作：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> prevCountRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    prevCountRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> prevCount <span class=\\\"token operator\\\">=</span> prevCountRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Now<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> before<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>prevCount<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这可能有点复杂，但你可以将其提取到自定义Hook中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> prevCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">usePrevious</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Now<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> before<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>prevCount<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">usePrevious</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> ref <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ref<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> ref<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>注意这种方式如何用在props，state或任何其他计算值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> calculation <span class=\\\"token operator\\\">=</span> count <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> prevCalculation <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">usePrevious</span><span class=\\\"token punctuation\\\">(</span>calculation<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>未来React可能会提供<code class=\\\"gatsby-code-text\\\">usePrevious</code>开箱即用的Hook，因为它是一个相对常见的用例。</p>\\n<p>另请参见<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\\\">派生状态的推荐模式</a>。</p>\\n<h3 id=\\\"我该如何实现getderivedstatefromprops？\\\"><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0getderivedstatefromprops%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我该如何实现<code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>？</h3>\\n<p>虽然你可能<a href=\\\"https://react.docschina.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\\\">不需要它</a>，但在极少数情况下（例如实现<code class=\\\"gatsby-code-text\\\">&lt;Transition&gt;</code>组件），你可以在渲染期间更新状态。在退出第一个渲染后，React将立即重新运行具有更新状态的组件，因此它不会很昂贵。</p>\\n<p>在这里，我们将<code class=\\\"gatsby-code-text\\\">row</code>prop 的先前值存储在状态变量中，以便我们可以比较：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ScrollView</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>row<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>isScrollingDown<span class=\\\"token punctuation\\\">,</span> setIsScrollingDown<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>prevRow<span class=\\\"token punctuation\\\">,</span> setPrevRow<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>row <span class=\\\"token operator\\\">!==</span> prevRow<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Row changed since last render. Update isScrollingDown.</span>\\n    <span class=\\\"token function\\\">setIsScrollingDown</span><span class=\\\"token punctuation\\\">(</span>prevRow <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">&amp;&amp;</span> row <span class=\\\"token operator\\\">></span> prevRow<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setPrevRow</span><span class=\\\"token punctuation\\\">(</span>row<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Scrolling down: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>isScrollingDown<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这看起来可能很奇怪，但其渲染过程中的更新过程正是与<code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>在概念上一致的。</p>\\n<h3 id=\\\"我可以对函数组件进行引用吗？\\\"><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%BC%95%E7%94%A8%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我可以对函数组件进行引用吗？</h3>\\n<p>虽然你不应需要经常这样做，但你可以通过使用<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#useimperativemethods\\\"><code class=\\\"gatsby-code-text\\\">useImperativeMethods</code></a>Hook 向父组件暴露一些命令性方法。</p>\\n<h3 id=\\\"const-thing-setthing--usestate是什么意思？\\\"><a href=\\\"#const-thing-setthing--usestate%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">const [thing, setThing] = useState()</code>是什么意思？</h3>\\n<p>如果你不熟悉这个语法，可以查看State Hook文档中的这个<a href=\\\"https://react.docschina.org/docs/hooks-state.html#tip-what-do-square-brackets-mean\\\">解释</a>。</p>\\n<h2 id=\\\"性能优化\\\"><a href=\\\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>性能优化</h2>\\n<h3 id=\\\"我可以在更新的时候跳过一个effect吗？\\\"><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%B6%E5%80%99%E8%B7%B3%E8%BF%87%E4%B8%80%E4%B8%AAeffect%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我可以在更新的时候跳过一个effect吗？</h3>\\n<p>是。请参阅<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#conditionally-firing-an-effect\\\">有条件地触发Effect</a>。请注意，忘记处理更新通常会<a href=\\\"https://react.docschina.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update\\\">引入错误</a>，这就是为什么这不是一个默认行为。</p>\\n<h3 id=\\\"我该如何实现shouldcomponentupdate？\\\"><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0shouldcomponentupdate%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我该如何实现<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>？</h3>\\n<p>你可以用<code class=\\\"gatsby-code-text\\\">React.memo</code>包装一个函数组件，进而来浅显比较它的props：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> Button <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">memo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// your component</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>它不是一个Hook，因为它不像Hooks那样构成。<code class=\\\"gatsby-code-text\\\">React.memo</code>相当于<code class=\\\"gatsby-code-text\\\">PureComponent</code>，但它只比较props。（你还可以添加第二个参数来指定采用旧props和新props的自定义比较函数。如果它返回true，则跳过更新。）</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.memo</code>不比较状态，因为没有单个状态对象可以进行比较。但是你也可以让children变得纯粹(pure)，甚至可以<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-memoize-calculations\\\">通过<code class=\\\"gatsby-code-text\\\">useMemo</code>优化个别children</a>。</p>\\n<h3 id=\\\"如何记忆计算？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BF%86%E8%AE%A1%E7%AE%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何记忆计算？</h3>\\n<p><a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usememo\\\"><code class=\\\"gatsby-code-text\\\">useMemo</code></a> Hook就可以让你在多次渲染的时候，缓存之前的计算结果</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> memoizedValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">computeExpensiveValue</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>这段代码会调用<code class=\\\"gatsby-code-text\\\">computeExpensiveValue(a, b)</code>。但是如果<code class=\\\"gatsby-code-text\\\">[a, b]</code>自上一个值以来一直没有改变，则<code class=\\\"gatsby-code-text\\\">useMemo</code>会跳过第二次调用它并简单地重用它返回的最后一个值。</p>\\n<p>方便的是，它也允许你跳过重渲染一个代价昂贵的child：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Only re-rendered if `a` changes:</span>\\n  <span class=\\\"token keyword\\\">const</span> child1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Child1</span> <span class=\\\"token attr-name\\\">a</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>a<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Only re-rendered if `b` changes:</span>\\n  <span class=\\\"token keyword\\\">const</span> child2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Child2</span> <span class=\\\"token attr-name\\\">b</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>b<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>child1<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">{</span>child2<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>请注意，</strong>这种方法在循环中不起作用，因为Hook调用<a href=\\\"https://react.docschina.org/docs/hooks-rules.html\\\">不能</a>放在循环中。但是你可以为列表项提取单独的组件，然后在那里调用<code class=\\\"gatsby-code-text\\\">useMemo</code>。</p>\\n<h3 id=\\\"由于在渲染中创建函数，hooks是否会变慢？\\\"><a href=\\\"#%E7%94%B1%E4%BA%8E%E5%9C%A8%E6%B8%B2%E6%9F%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%EF%BC%8Chooks%E6%98%AF%E5%90%A6%E4%BC%9A%E5%8F%98%E6%85%A2%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>由于在渲染中创建函数，Hooks是否会变慢？</h3>\\n<p>答案是否定的，在现代浏览器中，除了极端情况之外，与类相比，使用闭包的原始性能并没有显着差异。</p>\\n<p>此外，考虑到Hooks的设计在以下几个方面更有效：</p>\\n<ul>\\n<li>Hooks避免了类所需的大量开销，例如在构造函数中创建类实例和绑定（binding）事件处理程序的成本。</li>\\n<li><strong>使用Hooks的惯用代码不需要深层组件树嵌套</strong>，而这种嵌套在使用高阶组件，render props和Context的代码库中很常见。使用较小的组件树，React的工作量也会较少。</li>\\n</ul>\\n<p>传统上，React中内联函数的性能问题与每次渲染上传递新的回调会中断子组件中的<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>优化有关。Hooks从三个方面解决了这个问题。</p>\\n<ul>\\n<li><a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usecallback\\\"><code class=\\\"gatsby-code-text\\\">useCallback</code></a> Hook 可以让你在重渲染的时候依然保持对同一回调的引用，这样<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>就能继续工作：</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// Will not change unless `a` or `b` changes</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> memoizedCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>当个别children更新时，通过使用<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-memoize-calculations\\\"><code class=\\\"gatsby-code-text\\\">useMemo</code>Hook</a>使得它更容易控制，同时也减少了对pure components的需求。</li>\\n<li>最后，<code class=\\\"gatsby-code-text\\\">useReducer</code>Hook减少了深度传递回调的需要，接下来会介绍。</li>\\n</ul>\\n<h3 id=\\\"如何避免传递回调？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%BC%A0%E9%80%92%E5%9B%9E%E8%B0%83%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何避免传递回调？</h3>\\n<p>我们发现大多数人不喜欢手动在组件树的每一层进行回调的传递。虽然它更明确，但它可能感觉做了很多“脏活累活（plumping）”。</p>\\n<p>在大型组件树中，我们建议的另一种方法是通过从context的<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usereducer\\\"><code class=\\\"gatsby-code-text\\\">useReducer</code></a> Hook 中传递一个<code class=\\\"gatsby-code-text\\\">dispatch</code>函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> TodosDispatch <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TodosApp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token comment\\\">// Tip: `dispatch` won't change between re-renders</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>todos<span class=\\\"token punctuation\\\">,</span> dispatch<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useReducer</span><span class=\\\"token punctuation\\\">(</span>todosReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TodosDispatch.Provider</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>dispatch<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>DeepTree</span> <span class=\\\"token attr-name\\\">todos</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>todos<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TodosDispatch.Provider</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">TodosApp</code>树里面的任何一个孩子都可以使用<code class=\\\"gatsby-code-text\\\">dispatch</code>函数传递action到<code class=\\\"gatsby-code-text\\\">TodosApp</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">DeepChild</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token comment\\\">// If we want to perform an action, we can get dispatch from context.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> dispatch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>TodosDispatch<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>Add todo<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>从维护的角度来看这更方便（不需要保持转发回调），并且完全避免了回调问题。在深度更新<code class=\\\"gatsby-code-text\\\">dispatch</code>像这样向下传递是深度更新的推荐模式。</p>\\n<p>请注意，你仍然可以选择是将应用程序<em>状态</em>作为props（更明确）或是作为上下文传递（对于非常深的更新更方便）。如果你同时也使用上下文传递状态，请使用不同的上下文类型 —— <code class=\\\"gatsby-code-text\\\">dispatch</code>的上下文永远不会更改，因此读取它的组件不需要重新渲染，除非它们还需要应用程序状态。</p>\\n<h3 id=\\\"如何从usecallback读取经常变化的值？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E4%BB%8Eusecallback%E8%AF%BB%E5%8F%96%E7%BB%8F%E5%B8%B8%E5%8F%98%E5%8C%96%E7%9A%84%E5%80%BC%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何从<code class=\\\"gatsby-code-text\\\">useCallback</code>读取经常变化的值？</h3>\\n<blockquote>\\n<p>Also note that this pattern might cause problems in the <a href=\\\"/blog/2018/03/27/update-on-async-rendering.html\\\">concurrent mode</a>. We plan to provide more ergonomic alternatives in the future, but the safest solution right now is to always invalidate the callback if some value it depends on changes.</p>\\n<p>注意</p>\\n<p>我们建议<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\\\">从Context向下传递<code class=\\\"gatsby-code-text\\\">dispatch</code></a>而不是在props中传单个回调。下面的方法仅在此处提及只是为了完整性和预留逃生舱口（escape hatch）。</p>\\n<p>另请注意，此模式可能会导致<a href=\\\"https://react.docschina.org/blog/2018/03/27/update-on-async-rendering.html\\\">并发模式</a>出现问题。我们计划在未来提供更符合人体工程学的替代方案，但现在最安全的解决方案是，如果某些值依赖于更改，则始终使回调无效。</p>\\n</blockquote>\\n<p>在极少数情况下，你可能需要使用<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usecallback\\\"><code class=\\\"gatsby-code-text\\\">useCallback</code></a>去memoize一个回调，但是因为内部函数必须经常重新创建，因此memoization不能很好地工作。如果你要记忆的函数是事件处理程序并且它在渲染期间并未使用，则可以使用<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#is-there-something-like-instance-variables\\\">ref作为实例变量</a>，并将最后提交的值手动保存到其中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Form</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>text<span class=\\\"token punctuation\\\">,</span> updateText<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> textRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useMutationEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    textRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> text<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Write it to the ref</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> handleSubmit <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">const</span> currentText <span class=\\\"token operator\\\">=</span> textRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Read it from the ref</span>\\n</span>    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>currentText<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>textRef<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Don't recreate handleSubmit like [text] would do</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">onChange</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>e <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">updateText</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ExpensiveTree</span> <span class=\\\"token attr-name\\\">onSubmit</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleSubmit<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这是一个相当复杂的模式，它表明如果你需要的话你依然可以执行此逃逸舱口优化（escape hatch optimization）。当然，如果将其提取到自定义Hook就会更好点：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Form</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>text<span class=\\\"token punctuation\\\">,</span> updateText<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Will be memoized even if `text` changes:</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> handleSubmit <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useEventCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span>    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>text<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">onChange</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>e <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">updateText</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ExpensiveTree</span> <span class=\\\"token attr-name\\\">onSubmit</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleSubmit<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useEventCallback</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> dependencies<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> ref <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Cannot call an event handler while rendering.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useMutationEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ref<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>fn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>dependencies<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> fn <span class=\\\"token operator\\\">=</span> ref<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>ref<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在任何一种情况下，我们<strong>都不建议使用此模式</strong>，仅在此处显示完整性。相反，你最好<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\\\">避免向深处传递回调</a>。</p>\\n<h2 id=\\\"底层实现（under-the-hood）\\\"><a href=\\\"#%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%88under-the-hood%EF%BC%89\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>底层实现（Under the Hood）</h2>\\n<h3 id=\\\"react如何将hook调用与组件相关联？\\\"><a href=\\\"#react%E5%A6%82%E4%BD%95%E5%B0%86hook%E8%B0%83%E7%94%A8%E4%B8%8E%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%81%94%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>React如何将Hook调用与组件相关联？</h3>\\n<p>React跟踪当前渲染组件。由于<a href=\\\"https://react.docschina.org/docs/hooks-rules.html\\\">Hooks规则</a>，我们知道Hook只能从React组件（或自定义Hooks调用 ——它们也只能从React组件中调用）。</p>\\n<p>每个组件都有一个与之相关联的“存储器单元（memory cells）”的内部列表（list）。它们只是一些可以放置一些数据的JavaScript对象。当你调用Hook时<code class=\\\"gatsby-code-text\\\">useState()</code>，它会读取当前单元格（或在第一次渲染期间初始化它），然后将指针移动到下一个单元格。这就是多个<code class=\\\"gatsby-code-text\\\">useState()</code>调用各自获得独立本地状态的方式。可以<a href=\\\"https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\\\">参考</a></p>\\n<h3 id=\\\"hooks的现有技术是什么？\\\"><a href=\\\"#hooks%E7%9A%84%E7%8E%B0%E6%9C%89%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks的现有技术是什么？</h3>\\n<p>Hooks综合了几个不同来源的想法：</p>\\n<ul>\\n<li>我们旧的实验性的功能API在<a href=\\\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\\\">react-future</a>仓库中。</li>\\n<li>与render props API 相关的React社区的实验，包括<a href=\\\"https://github.com/ryanflorence\\\">Ryan Florence</a>的<a href=\\\"https://github.com/reactions/component\\\">Reactions Component</a>。</li>\\n<li><a href=\\\"https://github.com/trueadm\\\">Dominic Gannaway</a>提出了一个render props糖语法的<a href=\\\"https://gist.github.com/trueadm/17beb64288e30192f3aa29cad0218067\\\"><code class=\\\"gatsby-code-text\\\">adopt</code>关键字</a>提案。</li>\\n<li><a href=\\\"http://displayscript.org/introduction.html\\\">DisplayScript中的</a>状态变量和状态单元（ state cells ）。</li>\\n<li>ReasonReact中的<a href=\\\"https://reasonml.github.io/reason-react/docs/en/state-actions-reducer.html\\\">Reducer组件</a>。</li>\\n<li>Rx中的<a href=\\\"http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html\\\">Subscriptions</a>。</li>\\n<li>多核OCaml中的<a href=\\\"https://github.com/ocamllabs/ocaml-effects-tutorial#2-effectful-computations-in-a-pure-setting\\\">代数效应(Algebraic effects)</a>。</li>\\n</ul>\\n<p><a href=\\\"https://github.com/sebmarkbage\\\">SebastianMarkbåge</a>提出了Hooks的原创设计，后来由<a href=\\\"https://github.com/acdlite\\\">Andrew Clark</a>，<a href=\\\"https://github.com/sophiebits\\\">Sophie Alpert</a>，<a href=\\\"https://github.com/trueadm\\\">Dominic Gannaway</a>以及React团队的其他成员完善。</p>\",\"frontmatter\":{\"title\":\"Hooks FAQ\",\"next\":null,\"prev\":\"hooks-reference.html\"},\"fields\":{\"path\":\"docs/hooks-faq.md\",\"slug\":\"docs/hooks-faq.html\"}}},\"pathContext\":{\"slug\":\"docs/hooks-faq.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-hooks-faq-html-c64db350bb46bea6ad44.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><em>Hooks</em> 是一项新功能提案，可让你在不编写类的情况下使用状态(state)和其他React功能。它们目前处于React v16.7.0-alpha中，并在<a href=\\\"https://github.com/reactjs/rfcs/pull/68\\\">此RFC中</a>进行讨论。</p>\\n<p>此页面回答了一些有关<a href=\\\"https://react.docschina.org/docs/hooks-overview.html\\\">Hooks</a>的常见问题。</p>\\n<!--\\n  if you ever need to regenerate this, this snippet in the devtools console might help:\\n\\n  $$('.anchor').map(a =>\\n    `${' '.repeat(2 * +a.parentNode.nodeName.slice(1))}` +\\n    `[${a.parentNode.textContent}](${a.getAttribute('href')})`\\n  ).join('\\\\n')\\n-->\\n<ul>\\n<li>\\n<p><a href=\\\"#%E9%87%87%E7%94%A8%E7%AD%96%E7%95%A5\\\">采用策略</a></p>\\n<ul>\\n<li><a href=\\\"#%E6%88%91%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99%E6%89%80%E6%9C%89%E7%B1%BB%E7%BB%84%E4%BB%B6\\\">我是否需要重写所有类组件？</a></li>\\n<li><a href=\\\"#%E6%88%91%E7%9A%84%E7%8E%B0%E6%9C%89react%E7%9F%A5%E8%AF%86%E4%B8%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E8%83%BD%E4%BF%9D%E6%8C%81%E7%9B%B8%E5%85%B3%E6%80%A7\\\">我的现有React知识中有多少能保持相关性？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8hooksclass%E8%BF%98%E6%98%AF%E4%B8%A4%E8%80%85%E5%85%BC%E8%80%8C%E6%9C%89%E4%B9%8B\\\">我应该使用Hooks，Class还是两者兼而有之？</a></li>\\n<li><a href=\\\"#hooks%E6%B6%B5%E7%9B%96%E4%BA%86class%E7%9A%84%E6%89%80%E6%9C%89%E7%94%A8%E4%BE%8B%E5%90%97\\\">Hooks涵盖了Class的所有用例吗？</a></li>\\n<li><a href=\\\"#hooks%E4%BC%9A%E6%9B%BF%E6%8D%A2render-props%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%90%97\\\">Hooks会替换render props和高阶组件吗？</a></li>\\n<li><a href=\\\"#hook%E5%AF%B9%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6%E7%9A%84api%E6%9D%A5%E8%AF%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88redux%E7%9A%84connect%E5%92%8Creact-router%E7%AD%89\\\">Hook对流行框架的API来说意味着什么（Redux的<code class=\\\"gatsby-code-text\\\">connect()</code>和React Router等）？</a></li>\\n<li><a href=\\\"#hooks%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E5%90%97\\\">Hooks可以使用静态类型吗？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8hooks%E7%9A%84%E7%BB%84%E4%BB%B6\\\">如何测试使用Hooks的组件？</a></li>\\n<li><a href=\\\"#lint%E8%A7%84%E5%88%99%E7%A9%B6%E7%AB%9F%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E4%BA%86%E4%BB%80%E4%B9%88\\\">lint规则究竟强制执行了什么？</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E4%BB%8E-classes-%E8%BF%87%E6%B8%A1%E5%88%B0-hooks\\\">从 Classes 过渡到 Hooks</a></p>\\n<ul>\\n<li><a href=\\\"#class%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8Ehook%E7%9A%84%E5%AF%B9%E5%BA%94%E6%83%85%E5%86%B5\\\">Class中的生命周期与Hook的对应情况</a></li>\\n<li><a href=\\\"#%E6%98%AF%E5%90%A6%E6%9C%89%E7%B1%BB%E4%BC%BC%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%9C%E8%A5%BF\\\">是否有类似实例变量的东西？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E8%BF%98%E6%98%AF%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\\">我应该使用一个还是多个状态变量？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E4%BB%85%E5%9C%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E8%BF%90%E8%A1%8Ceffect%E5%90%97\\\">我可以仅在更新时运行Effect吗？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%BB%A5%E5%89%8D%E7%9A%84props%E6%88%96state\\\">如何获得以前的props或state？</a></li>\\n<li><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0getderivedstatefromprops\\\">我该如何实现<code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>？</a></li>\\n<li><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%BC%95%E7%94%A8%E5%90%97\\\">我可以对函数组件进行引用吗？</a></li>\\n<li><a href=\\\"#const-thing-setthing--usestate%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D\\\"><code class=\\\"gatsby-code-text\\\">const [thing, setThing] = useState()</code>是什么意思？</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\\\">性能优化</a></p>\\n<ul>\\n<li><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%B6%E5%80%99%E8%B7%B3%E8%BF%87%E4%B8%80%E4%B8%AAeffect%E5%90%97\\\">我可以在更新的时候跳过一个effect吗？</a></li>\\n<li><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0shouldcomponentupdate\\\">我该如何实现<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BF%86%E8%AE%A1%E7%AE%97\\\">如何记忆计算？</a></li>\\n<li><a href=\\\"#%E7%94%B1%E4%BA%8E%E5%9C%A8%E6%B8%B2%E6%9F%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0hooks%E6%98%AF%E5%90%A6%E4%BC%9A%E5%8F%98%E6%85%A2\\\">由于在渲染中创建函数，Hooks是否会变慢？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%BC%A0%E9%80%92%E5%9B%9E%E8%B0%83\\\">如何避免传递回调？</a></li>\\n<li><a href=\\\"#%E5%A6%82%E4%BD%95%E4%BB%8Eusecallback%E8%AF%BB%E5%8F%96%E7%BB%8F%E5%B8%B8%E5%8F%98%E5%8C%96%E7%9A%84%E5%80%BC\\\">如何从<code class=\\\"gatsby-code-text\\\">useCallback</code>读取经常变化的值？</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0under-the-hood\\\">底层实现（Under the Hood）</a></p>\\n<ul>\\n<li><a href=\\\"#react%E5%A6%82%E4%BD%95%E5%B0%86hook%E8%B0%83%E7%94%A8%E4%B8%8E%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%81%94\\\">React如何将Hook调用与组件相关联？</a></li>\\n<li><a href=\\\"#hooks%E7%9A%84%E7%8E%B0%E6%9C%89%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BB%80%E4%B9%88\\\">Hooks的现有技术是什么？</a></li>\\n</ul>\\n</li>\\n</ul>\\n<h2 id=\\\"采用策略\\\"><a href=\\\"#%E9%87%87%E7%94%A8%E7%AD%96%E7%95%A5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>采用策略</h2>\\n<h3 id=\\\"我是否需要重写所有类组件？\\\"><a href=\\\"#%E6%88%91%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99%E6%89%80%E6%9C%89%E7%B1%BB%E7%BB%84%E4%BB%B6%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我是否需要重写所有类组件？</h3>\\n<p>不需要，我们<a href=\\\"https://react.docschina.org/docs/hooks-intro.html#gradual-adoption-strategy\\\">没有计划</a>在React中删除Class——我们都需要保持出货的产品（ keep shipping products ），不可能承受重写的成本。我们建议你在新代码中尝试使用Hook。</p>\\n<h3 id=\\\"我的现有react知识中有多少能保持相关性？\\\"><a href=\\\"#%E6%88%91%E7%9A%84%E7%8E%B0%E6%9C%89react%E7%9F%A5%E8%AF%86%E4%B8%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E8%83%BD%E4%BF%9D%E6%8C%81%E7%9B%B8%E5%85%B3%E6%80%A7%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我的现有React知识中有多少能保持相关性？</h3>\\n<p>Hooks给你提供了一种更加直接使用React相关功能——例如状态，生命周期，上下文和引用的方式。但它们并没有从根本上改变React的工作方式，因此你对组件，Props和自上而下数据流的了解也同样重要。</p>\\n<p>Hooks确实有自己的学习曲线。如果本文档中缺少某些内容，请<a href=\\\"https://github.com/reactjs/reactjs.org/issues/new\\\">提出issue</a>，我们会尽力提供帮助。</p>\\n<h3 id=\\\"我应该使用hooks，class还是两者兼而有之？\\\"><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8hooks%EF%BC%8Cclass%E8%BF%98%E6%98%AF%E4%B8%A4%E8%80%85%E5%85%BC%E8%80%8C%E6%9C%89%E4%B9%8B%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我应该使用Hooks，Class还是两者兼而有之？</h3>\\n<p>当你准备好了，我们鼓励你开始尝试在你新组件中使用Hooks。请确保团队中的每个人都使用它们并熟悉本文档。我们不建议将现有Class重写为Hooks，除非你计划重写它们（例如修复bugs）。</p>\\n<p>你不能在类组件<em>中</em>使用Hooks ，但你绝对可以在一棵组件树中将Class组件和使用Hooks的函数组件混合在一起。无论一个组件是Class还是使用Hook的函数，这只是该组件的实现细节。<strong>当然从长远来看，我们希望Hooks成为人们编写React组件的主要方式。</strong></p>\\n<h3 id=\\\"hooks涵盖了class的所有用例吗？\\\"><a href=\\\"#hooks%E6%B6%B5%E7%9B%96%E4%BA%86class%E7%9A%84%E6%89%80%E6%9C%89%E7%94%A8%E4%BE%8B%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks涵盖了Class的所有用例吗？</h3>\\n<p>我们的目标是让Hooks尽快涵盖Class的所有用例。对于不常见<code class=\\\"gatsby-code-text\\\">getSnapshotBeforeUpdate</code>和<code class=\\\"gatsby-code-text\\\">componentDidCatch</code>生命周期目前还没有对应的Hook，但我们计划会很快添加上。</p>\\n<p>对于Hook来说，现在还是一个非常早的时期，因此一些方面的集成（如DevTools支持，或Flow/TypeScript类型）可能还没有准备好。某些第三方库也可能与Hook不兼容。</p>\\n<h3 id=\\\"hooks会替换render-props和高阶组件吗？\\\"><a href=\\\"#hooks%E4%BC%9A%E6%9B%BF%E6%8D%A2render-props%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks会替换render props和高阶组件吗？</h3>\\n<p>通常，render props和高阶组件只渲染一个children。我们认为使用Hooks实现这种用例将会更加简单。就目前而言，这两种模式仍然有其立足之地（例如，虚拟滚动组件可能具有<code class=\\\"gatsby-code-text\\\">renderItem</code>prop，或者可视容器组件可能具有其自己的DOM结构）。但在大多数情况下，使用Hooks就足够了，它可以帮助你减少组件树中的嵌套。</p>\\n<h3 id=\\\"hook对流行框架的api来说意味着什么（redux的connect和react-router等）？\\\"><a href=\\\"#hook%E5%AF%B9%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6%E7%9A%84api%E6%9D%A5%E8%AF%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%88redux%E7%9A%84connect%E5%92%8Creact-router%E7%AD%89%EF%BC%89%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hook对流行框架的API来说意味着什么（Redux的<code class=\\\"gatsby-code-text\\\">connect()</code>和React Router等）？</h3>\\n<p>首先，你还可以继续像以往一样使用这些API，没有任何影响。（毕竟函数组件和Class组件本质上没太多区别）</p>\\n<p>其次，这些库的新版本也可能导出自定义Hook，例如，<code class=\\\"gatsby-code-text\\\">useRedux()</code>或者<code class=\\\"gatsby-code-text\\\">useRouter()</code>允许你使用相同的功能而不需要包装器组件。</p>\\n<h3 id=\\\"hooks可以使用静态类型吗？\\\"><a href=\\\"#hooks%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks可以使用静态类型吗？</h3>\\n<p>Hooks的设计考虑了静态类型。因为它们是函数，所以它们比高阶组件之类的模式更容易正确键入。我们已提前与Flow和TypeScript团队联系，他们计划在未来包含React Hooks的定义。</p>\\n<p>重要的是，如果你想以某种方式更严格地键入React API，则可以考虑使用自定义Hook，它可以让你有权限制React API。React为你提供了原语，但你可以采用与我们提供的开箱即用方式所不同的方式将它们组合在一起。</p>\\n<h3 id=\\\"如何测试使用hooks的组件？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8hooks%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何测试使用Hooks的组件？</h3>\\n<p>从React的角度来看，使用Hooks的组件也只是一个普通的组件。如果你的测试解决方案不依赖于React内部，则测试使用了Hooks的组件应与你正常测试组件的方式相同。</p>\\n<p>如果你需要测试自定义Hook，可以通过在测试中创建一个组件并使用自定义Hook来实现。然后，你就可以测试你所编写的组件。</p>\\n<h3 id=\\\"lint规则究竟强制执行了什么？\\\"><a href=\\\"#lint%E8%A7%84%E5%88%99%E7%A9%B6%E7%AB%9F%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://www.npmjs.com/package/eslint-plugin-react-hooks\\\">lint规则</a>究竟强制执行了什么？</h3>\\n<p>我们提供了一个<a href=\\\"https://www.npmjs.com/package/eslint-plugin-react-hooks\\\">ESLint插件</a>，它强制执行<a href=\\\"https://react.docschina.org/docs/hooks-rules.html\\\">Hooks规则</a>以避免错误。它假设任何以“ <code class=\\\"gatsby-code-text\\\">use</code>” 开头的函数和紧跟在它之后的大写字母是一个Hook。我们认识到这种启发式方法并不完美，可能存在一些误报，但如果没有整个生态系统的约定，就没有办法让Hooks良好的运作 —— 更长的名字会阻止人们采用Hooks或遵循其惯例。</p>\\n<p>特别是，该规则强制执行：</p>\\n<ul>\\n<li>对Hooks的调用要么在<em>Pascal</em>命名法（PascalCase）的函数内部（假设是一个组件），要么是另一个<code class=\\\"gatsby-code-text\\\">useSomething</code>函数（假定为自定义Hook）。</li>\\n<li>在每个渲染上以相同的顺序调用Hook。</li>\\n</ul>\\n<p>还有一些启发式方法，它们可能会随着时间的推移而改变，因为我们会对规则进行微调以寻求在发现错误和避免误报之间的平衡。</p>\\n<h2 id=\\\"从-classes-过渡到-hooks\\\"><a href=\\\"#%E4%BB%8E-classes-%E8%BF%87%E6%B8%A1%E5%88%B0-hooks\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>从 Classes 过渡到 Hooks</h2>\\n<h3 id=\\\"class中的生命周期与hook的对应情况\\\"><a href=\\\"#class%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8Ehook%E7%9A%84%E5%AF%B9%E5%BA%94%E6%83%85%E5%86%B5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Class中的生命周期与Hook的对应情况</h3>\\n<ul>\\n<li><code class=\\\"gatsby-code-text\\\">constructor</code>：函数组件不需要构造函数。你可以通过调用<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usestate\\\"><code class=\\\"gatsby-code-text\\\">useState</code></a>进行初始化。如果计算成本很高，你可以传递一个函数给<code class=\\\"gatsby-code-text\\\">useState</code>。</li>\\n<li><code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>：改为<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\\\">在渲染时</a>安排更新。</li>\\n<li><code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>：通过 <code class=\\\"gatsby-code-text\\\">React.memo</code> ，<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate\\\">下文</a>会介绍</li>\\n<li><code class=\\\"gatsby-code-text\\\">render</code>:就是函数本身。</li>\\n<li><code class=\\\"gatsby-code-text\\\">componentDidMount</code>，<code class=\\\"gatsby-code-text\\\">componentDidUpdate</code>，<code class=\\\"gatsby-code-text\\\">componentWillUnmount</code>：<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#useeffect\\\"><code class=\\\"gatsby-code-text\\\">useEffect</code> Hook</a>可表示所有这些组合（包括<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#can-i-skip-an-effect-on-updates\\\">不怎么常见</a> 、<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#can-i-run-an-effect-only-on-updates\\\">常见</a>用例）。</li>\\n<li><code class=\\\"gatsby-code-text\\\">componentDidCatch</code> and <code class=\\\"gatsby-code-text\\\">getDerivedStateFromError</code>: 暂无，后续会加上。</li>\\n</ul>\\n<h3 id=\\\"是否有类似实例变量的东西？\\\"><a href=\\\"#%E6%98%AF%E5%90%A6%E6%9C%89%E7%B1%BB%E4%BC%BC%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>是否有类似实例变量的东西？</h3>\\n<p>有的! <a href=\\\"https://react.docschina.org/docs/hooks-reference.html#useref\\\"><code class=\\\"gatsby-code-text\\\">useRef()</code></a>Hook不只是可以用在DOM上。“ref”对象实际上是一个通用容器，其<code class=\\\"gatsby-code-text\\\">current</code>属性是可变的，可以保存任何值，类似于类上的实例属性。</p>\\n<p>你可以从<code class=\\\"gatsby-code-text\\\">useEffect</code>从修改它：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> intervalRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> id <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    intervalRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>如果我们只是想设置一个间隔，我们就不需要ref（<code class=\\\"gatsby-code-text\\\">id</code>可以作为effect的local变量），但如果我们想从事件处理程序中清除间隔，它会很有用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleCancelClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>从概念上讲，你可以将refs视为类中的实例变量。但是，请避免在渲染过程中设置引用 —— 这可能会导致出乎意料的行为。相反，你应该只在事件处理程序和Effect中的修改引用。</p>\\n<h3 id=\\\"我应该使用一个还是多个状态变量？\\\"><a href=\\\"#%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E8%BF%98%E6%98%AF%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我应该使用一个还是多个状态变量？</h3>\\n<p>如果你来自Class模式，你可能总是想要在<code class=\\\"gatsby-code-text\\\">useState()</code>一次调用的时就候将所有状态放入一个对象中。如果你愿意，你可以这样做。以下是鼠标移动后的组件示例。我们在local保持其position和size：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Box</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>state<span class=\\\"token punctuation\\\">,</span> setState<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>现在我们想写当用户移动鼠标的的时候，改变<code class=\\\"gatsby-code-text\\\">left</code>以及<code class=\\\"gatsby-code-text\\\">top</code>的逻辑。请注意，我们必须<strong>手动</strong>将这些字段合并到以前的状态对象中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleWindowMouseMove</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token comment\\\">// Spreading \\\"...state\\\" ensures we don't \\\"lose\\\" width and height</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>state <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageX<span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageY <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// Note: this implementation is a bit simplified</span>\\n    window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mousemove'</span><span class=\\\"token punctuation\\\">,</span> handleWindowMouseMove<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mousemove'</span><span class=\\\"token punctuation\\\">,</span> handleWindowMouseMove<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>这是因为当我们更新状态变量时，我们会<em>替换</em>它的值。这是不同于<code class=\\\"gatsby-code-text\\\">this.setState</code>的一点，它会自动<em>合并</em>了更新的字段到对象。</p>\\n<p>如果你怀念自动合并的方式，则可以编写自动合并对象状态更新的自定义Hook<code class=\\\"gatsby-code-text\\\">useLegacyState</code>。但是，<strong>我们建议根据哪些值趋于一同更改将状态拆分为多个状态变量。</strong></p>\\n<p>例如，我们可以将组件状态拆分为<code class=\\\"gatsby-code-text\\\">position</code>和<code class=\\\"gatsby-code-text\\\">size</code>对象，并始终替换<code class=\\\"gatsby-code-text\\\">position</code>而不需要合并</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Box</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>position<span class=\\\"token punctuation\\\">,</span> setPosition<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>size<span class=\\\"token punctuation\\\">,</span> setSize<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleWindowMouseMove</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token function\\\">setPosition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageX<span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>pageY <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>分离独立的状态变量也有另一个好处。稍后可以轻松地将一些相关逻辑提取到自定义Hook中，例如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Box</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> position <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useWindowPosition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>size<span class=\\\"token punctuation\\\">,</span> setSize<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> width<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">100</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useWindowPosition</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>position<span class=\\\"token punctuation\\\">,</span> setPosition<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> left<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> position<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>请注意我们如何在不更改代码的情况下，将与<code class=\\\"gatsby-code-text\\\">position</code>状态变量相关的<code class=\\\"gatsby-code-text\\\">useStateh</code>和Effect移动到自定义Hook中。如果所有状态都在单个对象中，提取它们将更加困难。</p>\\n<p>将所有状态都放在一次<code class=\\\"gatsby-code-text\\\">useState</code>调用中，亦或是将每个字段都使用一次<code class=\\\"gatsby-code-text\\\">useState</code>调用，这两种方式都行的通。当你能在这两个极端之间找到平衡，将组相关状态分组为几个独立的状态变量时，组件往往最具可读性。如果状态逻辑变得复杂，我们建议<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usereducer\\\">用reducer的方式</a>或自定义Hook 管理它。</p>\\n<h3 id=\\\"我可以仅在更新时运行effect吗？\\\"><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E4%BB%85%E5%9C%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E8%BF%90%E8%A1%8Ceffect%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我可以仅在更新时运行Effect吗？</h3>\\n<p>这是一个罕见的用例。如果需要，可以<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#is-there-something-like-instance-variables\\\">使用手动操作ref</a>的方式，手动存储一个布尔值，该值对应于你是第一次还是后续渲染做判断，然后在Effect中检查该标志。（如果你发现自己经常这样做，可以为它创建一个自定义Hook。）</p>\\n<h3 id=\\\"如何获得以前的props或state？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%BB%A5%E5%89%8D%E7%9A%84props%E6%88%96state%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何获得以前的props或state？</h3>\\n<p>目前，你可以<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#is-there-something-like-instance-variables\\\">使用ref</a>手动执行此操作：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> prevCountRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    prevCountRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> count<span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> prevCount <span class=\\\"token operator\\\">=</span> prevCountRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Now<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> before<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>prevCount<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这可能有点复杂，但你可以将其提取到自定义Hook中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> prevCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">usePrevious</span><span class=\\\"token punctuation\\\">(</span>count<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Now<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> before<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>prevCount<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">usePrevious</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> ref <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ref<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> ref<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>注意这种方式如何用在props，state或任何其他计算值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> calculation <span class=\\\"token operator\\\">=</span> count <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> prevCalculation <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">usePrevious</span><span class=\\\"token punctuation\\\">(</span>calculation<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>未来React可能会提供<code class=\\\"gatsby-code-text\\\">usePrevious</code>开箱即用的Hook，因为它是一个相对常见的用例。</p>\\n<p>另请参见<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\\\">派生状态的推荐模式</a>。</p>\\n<h3 id=\\\"我该如何实现getderivedstatefromprops？\\\"><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0getderivedstatefromprops%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我该如何实现<code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>？</h3>\\n<p>虽然你可能<a href=\\\"https://react.docschina.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\\\">不需要它</a>，但在极少数情况下（例如实现<code class=\\\"gatsby-code-text\\\">&lt;Transition&gt;</code>组件），你可以在渲染期间更新状态。在退出第一个渲染后，React将立即重新运行具有更新状态的组件，因此它不会很昂贵。</p>\\n<p>在这里，我们将<code class=\\\"gatsby-code-text\\\">row</code>prop 的先前值存储在状态变量中，以便我们可以比较：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ScrollView</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>row<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>isScrollingDown<span class=\\\"token punctuation\\\">,</span> setIsScrollingDown<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>prevRow<span class=\\\"token punctuation\\\">,</span> setPrevRow<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>row <span class=\\\"token operator\\\">!==</span> prevRow<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Row changed since last render. Update isScrollingDown.</span>\\n    <span class=\\\"token function\\\">setIsScrollingDown</span><span class=\\\"token punctuation\\\">(</span>prevRow <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">&amp;&amp;</span> row <span class=\\\"token operator\\\">></span> prevRow<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setPrevRow</span><span class=\\\"token punctuation\\\">(</span>row<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Scrolling down: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>isScrollingDown<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这看起来可能很奇怪，但其渲染过程中的更新过程正是与<code class=\\\"gatsby-code-text\\\">getDerivedStateFromProps</code>在概念上一致的。</p>\\n<h3 id=\\\"我可以对函数组件进行引用吗？\\\"><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%BC%95%E7%94%A8%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我可以对函数组件进行引用吗？</h3>\\n<p>虽然你不应需要经常这样做，但你可以通过使用<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#useimperativemethods\\\"><code class=\\\"gatsby-code-text\\\">useImperativeMethods</code></a>Hook 向父组件暴露一些命令性方法。</p>\\n<h3 id=\\\"const-thing-setthing--usestate是什么意思？\\\"><a href=\\\"#const-thing-setthing--usestate%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">const [thing, setThing] = useState()</code>是什么意思？</h3>\\n<p>如果你不熟悉这个语法，可以查看State Hook文档中的这个<a href=\\\"https://react.docschina.org/docs/hooks-state.html#tip-what-do-square-brackets-mean\\\">解释</a>。</p>\\n<h2 id=\\\"性能优化\\\"><a href=\\\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>性能优化</h2>\\n<h3 id=\\\"我可以在更新的时候跳过一个effect吗？\\\"><a href=\\\"#%E6%88%91%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%B6%E5%80%99%E8%B7%B3%E8%BF%87%E4%B8%80%E4%B8%AAeffect%E5%90%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我可以在更新的时候跳过一个effect吗？</h3>\\n<p>是。请参阅<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#conditionally-firing-an-effect\\\">有条件地触发Effect</a>。请注意，忘记处理更新通常会<a href=\\\"https://react.docschina.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update\\\">引入错误</a>，这就是为什么这不是一个默认行为。</p>\\n<h3 id=\\\"我该如何实现shouldcomponentupdate？\\\"><a href=\\\"#%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0shouldcomponentupdate%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>我该如何实现<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>？</h3>\\n<p>你可以用<code class=\\\"gatsby-code-text\\\">React.memo</code>包装一个函数组件，进而来浅显比较它的props：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> Button <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">memo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// your component</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>它不是一个Hook，因为它不像Hooks那样构成。<code class=\\\"gatsby-code-text\\\">React.memo</code>相当于<code class=\\\"gatsby-code-text\\\">PureComponent</code>，但它只比较props。（你还可以添加第二个参数来指定采用旧props和新props的自定义比较函数。如果它返回true，则跳过更新。）</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.memo</code>不比较状态，因为没有单个状态对象可以进行比较。但是你也可以让children变得纯粹(pure)，甚至可以<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-memoize-calculations\\\">通过<code class=\\\"gatsby-code-text\\\">useMemo</code>优化个别children</a>。</p>\\n<h3 id=\\\"如何记忆计算？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BF%86%E8%AE%A1%E7%AE%97%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何记忆计算？</h3>\\n<p><a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usememo\\\"><code class=\\\"gatsby-code-text\\\">useMemo</code></a> Hook就可以让你在多次渲染的时候，缓存之前的计算结果</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> memoizedValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">computeExpensiveValue</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>这段代码会调用<code class=\\\"gatsby-code-text\\\">computeExpensiveValue(a, b)</code>。但是如果<code class=\\\"gatsby-code-text\\\">[a, b]</code>自上一个值以来一直没有改变，则<code class=\\\"gatsby-code-text\\\">useMemo</code>会跳过第二次调用它并简单地重用它返回的最后一个值。</p>\\n<p>方便的是，它也允许你跳过重渲染一个代价昂贵的child：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Only re-rendered if `a` changes:</span>\\n  <span class=\\\"token keyword\\\">const</span> child1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Child1</span> <span class=\\\"token attr-name\\\">a</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>a<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Only re-rendered if `b` changes:</span>\\n  <span class=\\\"token keyword\\\">const</span> child2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Child2</span> <span class=\\\"token attr-name\\\">b</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>b<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>child1<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">{</span>child2<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>请注意，</strong>这种方法在循环中不起作用，因为Hook调用<a href=\\\"https://react.docschina.org/docs/hooks-rules.html\\\">不能</a>放在循环中。但是你可以为列表项提取单独的组件，然后在那里调用<code class=\\\"gatsby-code-text\\\">useMemo</code>。</p>\\n<h3 id=\\\"由于在渲染中创建函数，hooks是否会变慢？\\\"><a href=\\\"#%E7%94%B1%E4%BA%8E%E5%9C%A8%E6%B8%B2%E6%9F%93%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%EF%BC%8Chooks%E6%98%AF%E5%90%A6%E4%BC%9A%E5%8F%98%E6%85%A2%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>由于在渲染中创建函数，Hooks是否会变慢？</h3>\\n<p>答案是否定的，在现代浏览器中，除了极端情况之外，与类相比，使用闭包的原始性能并没有显着差异。</p>\\n<p>此外，考虑到Hooks的设计在以下几个方面更有效：</p>\\n<ul>\\n<li>Hooks避免了类所需的大量开销，例如在构造函数中创建类实例和绑定（binding）事件处理程序的成本。</li>\\n<li><strong>使用Hooks的惯用代码不需要深层组件树嵌套</strong>，而这种嵌套在使用高阶组件，render props和Context的代码库中很常见。使用较小的组件树，React的工作量也会较少。</li>\\n</ul>\\n<p>传统上，React中内联函数的性能问题与每次渲染上传递新的回调会中断子组件中的<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>优化有关。Hooks从三个方面解决了这个问题。</p>\\n<ul>\\n<li><a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usecallback\\\"><code class=\\\"gatsby-code-text\\\">useCallback</code></a> Hook 可以让你在重渲染的时候依然保持对同一回调的引用，这样<code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>就能继续工作：</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// Will not change unless `a` or `b` changes</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">const</span> memoizedCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>当个别children更新时，通过使用<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-memoize-calculations\\\"><code class=\\\"gatsby-code-text\\\">useMemo</code>Hook</a>使得它更容易控制，同时也减少了对pure components的需求。</li>\\n<li>最后，<code class=\\\"gatsby-code-text\\\">useReducer</code>Hook减少了深度传递回调的需要，接下来会介绍。</li>\\n</ul>\\n<h3 id=\\\"如何避免传递回调？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%BC%A0%E9%80%92%E5%9B%9E%E8%B0%83%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何避免传递回调？</h3>\\n<p>我们发现大多数人不喜欢手动在组件树的每一层进行回调的传递。虽然它更明确，但它可能感觉做了很多“脏活累活（plumping）”。</p>\\n<p>在大型组件树中，我们建议的另一种方法是通过从context的<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usereducer\\\"><code class=\\\"gatsby-code-text\\\">useReducer</code></a> Hook 中传递一个<code class=\\\"gatsby-code-text\\\">dispatch</code>函数：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> TodosDispatch <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TodosApp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token comment\\\">// Tip: `dispatch` won't change between re-renders</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>todos<span class=\\\"token punctuation\\\">,</span> dispatch<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useReducer</span><span class=\\\"token punctuation\\\">(</span>todosReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TodosDispatch.Provider</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>dispatch<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>DeepTree</span> <span class=\\\"token attr-name\\\">todos</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>todos<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TodosDispatch.Provider</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">TodosApp</code>树里面的任何一个孩子都可以使用<code class=\\\"gatsby-code-text\\\">dispatch</code>函数传递action到<code class=\\\"gatsby-code-text\\\">TodosApp</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">DeepChild</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token comment\\\">// If we want to perform an action, we can get dispatch from context.</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> dispatch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>TodosDispatch<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">onClick</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>Add todo<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>从维护的角度来看这更方便（不需要保持转发回调），并且完全避免了回调问题。在深度更新<code class=\\\"gatsby-code-text\\\">dispatch</code>像这样向下传递是深度更新的推荐模式。</p>\\n<p>请注意，你仍然可以选择是将应用程序<em>状态</em>作为props（更明确）或是作为上下文传递（对于非常深的更新更方便）。如果你同时也使用上下文传递状态，请使用不同的上下文类型 —— <code class=\\\"gatsby-code-text\\\">dispatch</code>的上下文永远不会更改，因此读取它的组件不需要重新渲染，除非它们还需要应用程序状态。</p>\\n<h3 id=\\\"如何从usecallback读取经常变化的值？\\\"><a href=\\\"#%E5%A6%82%E4%BD%95%E4%BB%8Eusecallback%E8%AF%BB%E5%8F%96%E7%BB%8F%E5%B8%B8%E5%8F%98%E5%8C%96%E7%9A%84%E5%80%BC%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>如何从<code class=\\\"gatsby-code-text\\\">useCallback</code>读取经常变化的值？</h3>\\n<blockquote>\\n<p>Also note that this pattern might cause problems in the <a href=\\\"/blog/2018/03/27/update-on-async-rendering.html\\\">concurrent mode</a>. We plan to provide more ergonomic alternatives in the future, but the safest solution right now is to always invalidate the callback if some value it depends on changes.</p>\\n<p>注意</p>\\n<p>我们建议<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\\\">从Context向下传递<code class=\\\"gatsby-code-text\\\">dispatch</code></a>而不是在props中传单个回调。下面的方法仅在此处提及只是为了完整性和预留逃生舱口（escape hatch）。</p>\\n<p>另请注意，此模式可能会导致<a href=\\\"https://react.docschina.org/blog/2018/03/27/update-on-async-rendering.html\\\">并发模式</a>出现问题。我们计划在未来提供更符合人体工程学的替代方案，但现在最安全的解决方案是，如果某些值依赖于更改，则始终使回调无效。</p>\\n</blockquote>\\n<p>在极少数情况下，你可能需要使用<a href=\\\"https://react.docschina.org/docs/hooks-reference.html#usecallback\\\"><code class=\\\"gatsby-code-text\\\">useCallback</code></a>去memoize一个回调，但是因为内部函数必须经常重新创建，因此memoization不能很好地工作。如果你要记忆的函数是事件处理程序并且它在渲染期间并未使用，则可以使用<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#is-there-something-like-instance-variables\\\">ref作为实例变量</a>，并将最后提交的值手动保存到其中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Form</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>text<span class=\\\"token punctuation\\\">,</span> updateText<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> textRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useMutationEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    textRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> text<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Write it to the ref</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> handleSubmit <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">const</span> currentText <span class=\\\"token operator\\\">=</span> textRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Read it from the ref</span>\\n</span>    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>currentText<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>textRef<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Don't recreate handleSubmit like [text] would do</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">onChange</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>e <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">updateText</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ExpensiveTree</span> <span class=\\\"token attr-name\\\">onSubmit</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleSubmit<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这是一个相当复杂的模式，它表明如果你需要的话你依然可以执行此逃逸舱口优化（escape hatch optimization）。当然，如果将其提取到自定义Hook就会更好点：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Form</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>text<span class=\\\"token punctuation\\\">,</span> updateText<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Will be memoized even if `text` changes:</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">const</span> handleSubmit <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useEventCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n</span>    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>text<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>text<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">onChange</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>e <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">updateText</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ExpensiveTree</span> <span class=\\\"token attr-name\\\">onSubmit</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleSubmit<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useEventCallback</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">,</span> dependencies<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span>  <span class=\\\"token keyword\\\">const</span> ref <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Cannot call an event handler while rendering.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useMutationEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ref<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> fn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>fn<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>dependencies<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> fn <span class=\\\"token operator\\\">=</span> ref<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>ref<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>在任何一种情况下，我们<strong>都不建议使用此模式</strong>，仅在此处显示完整性。相反，你最好<a href=\\\"https://react.docschina.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\\\">避免向深处传递回调</a>。</p>\\n<h2 id=\\\"底层实现（under-the-hood）\\\"><a href=\\\"#%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%88under-the-hood%EF%BC%89\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>底层实现（Under the Hood）</h2>\\n<h3 id=\\\"react如何将hook调用与组件相关联？\\\"><a href=\\\"#react%E5%A6%82%E4%BD%95%E5%B0%86hook%E8%B0%83%E7%94%A8%E4%B8%8E%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%81%94%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>React如何将Hook调用与组件相关联？</h3>\\n<p>React跟踪当前渲染组件。由于<a href=\\\"https://react.docschina.org/docs/hooks-rules.html\\\">Hooks规则</a>，我们知道Hook只能从React组件（或自定义Hooks调用 ——它们也只能从React组件中调用）。</p>\\n<p>每个组件都有一个与之相关联的“存储器单元（memory cells）”的内部列表（list）。它们只是一些可以放置一些数据的JavaScript对象。当你调用Hook时<code class=\\\"gatsby-code-text\\\">useState()</code>，它会读取当前单元格（或在第一次渲染期间初始化它），然后将指针移动到下一个单元格。这就是多个<code class=\\\"gatsby-code-text\\\">useState()</code>调用各自获得独立本地状态的方式。可以<a href=\\\"https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e\\\">参考</a></p>\\n<h3 id=\\\"hooks的现有技术是什么？\\\"><a href=\\\"#hooks%E7%9A%84%E7%8E%B0%E6%9C%89%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooks的现有技术是什么？</h3>\\n<p>Hooks综合了几个不同来源的想法：</p>\\n<ul>\\n<li>我们旧的实验性的功能API在<a href=\\\"https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State\\\">react-future</a>仓库中。</li>\\n<li>与render props API 相关的React社区的实验，包括<a href=\\\"https://github.com/ryanflorence\\\">Ryan Florence</a>的<a href=\\\"https://github.com/reactions/component\\\">Reactions Component</a>。</li>\\n<li><a href=\\\"https://github.com/trueadm\\\">Dominic Gannaway</a>提出了一个render props糖语法的<a href=\\\"https://gist.github.com/trueadm/17beb64288e30192f3aa29cad0218067\\\"><code class=\\\"gatsby-code-text\\\">adopt</code>关键字</a>提案。</li>\\n<li><a href=\\\"http://displayscript.org/introduction.html\\\">DisplayScript中的</a>状态变量和状态单元（ state cells ）。</li>\\n<li>ReasonReact中的<a href=\\\"https://reasonml.github.io/reason-react/docs/en/state-actions-reducer.html\\\">Reducer组件</a>。</li>\\n<li>Rx中的<a href=\\\"http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html\\\">Subscriptions</a>。</li>\\n<li>多核OCaml中的<a href=\\\"https://github.com/ocamllabs/ocaml-effects-tutorial#2-effectful-computations-in-a-pure-setting\\\">代数效应(Algebraic effects)</a>。</li>\\n</ul>\\n<p><a href=\\\"https://github.com/sebmarkbage\\\">SebastianMarkbåge</a>提出了Hooks的原创设计，后来由<a href=\\\"https://github.com/acdlite\\\">Andrew Clark</a>，<a href=\\\"https://github.com/sophiebits\\\">Sophie Alpert</a>，<a href=\\\"https://github.com/trueadm\\\">Dominic Gannaway</a>以及React团队的其他成员完善。</p>\",\"frontmatter\":{\"title\":\"Hooks FAQ\",\"next\":null,\"prev\":\"hooks-reference.html\"},\"fields\":{\"path\":\"docs/hooks-faq.md\",\"slug\":\"docs/hooks-faq.html\"}}},\"pathContext\":{\"slug\":\"docs/hooks-faq.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-hooks-faq-html.json\n// module id = 900\n// module chunks = 168812293061475"],"sourceRoot":""}